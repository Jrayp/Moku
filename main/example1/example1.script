local moku = require "moku/moku"

--o=========================o
--o Forward Declarations
--o=========================o

local set_cell_id
local get_map_and_coords
local setup_simple
local setup_complex

--o====================o
--o  Script functions
--o====================o

function init(self)
    msg.post("@render:", "clear_color", { color = vmath.vector4(.25, .25, .25, 0) } )

    setup_simple(self)
    setup_complex(self)

    msg.post(".", "acquire_input_focus")
end

function on_input(self, action_id, action)
    if action_id == hash("left_click") or action_id == hash("ctrl") or action_id == hash("shift") then
        set_cell_id(self, action_id, action)
    end
end

--o===================o
--o  Local functions
--o===================o

-- Setup the simple and easy 8bit tilemap
function setup_complex(self)

    -- Store the map objects world position for cell picking
    self.map_complex_pos = go.get_position("map_complex")

    -- Tile id bookkeeping
    local tile_ids = {
        -- Autotiles
        PLAINS = 1,
        PLATEAU = 49,
        -- Normal Tiles
        OCEAN = 97
    }

    -- Build the moku map from the defold tilemap
    self.map_complex = moku.new_from_tm("map_complex#example1_tm", "layer1", 32, 32)

    -- Add the tile id table to the map, for easy and logical access
    self.map_complex.tile_ids = tile_ids

    -- Designate the PLAINS and PLATEAU tile ids as autotiles.
    moku.set_autotile(self.map_complex, tile_ids.PLAINS, moku.at_algorithm.COMPLEX, true, true, true, {tile_ids.PLATEAU})
    moku.set_autotile(self.map_complex, tile_ids.PLATEAU, moku.at_algorithm.COMPLEX, true, true, true)

    -- Autotile the map
    moku.autotile_map(self.map_complex)
end

-- Setup the horrible mess 4bit custom map.
function setup_simple(self)

    -- Store the map objects world position for cell picking
    self.map_simple_pos = go.get_position("map_simple")

    -- Tile id bookkeeping
    local tile_ids = {
        --Autotiles
        WALL = 1,
        YELLOW_WALL = 17,
        --Normal Tiles
        FLOOR = 33
    }

    -- Mokus constructor functions allow the passing of a function thats called
    -- every time a new cell is created. This function is meant for altering
    -- the cell in any way you see fit. Note that nothing is keeping you from
    -- iterating over the map later, for more complex alteration.

    -- In this example we are setting the tile id based on map coords, creating
    -- and storing the tiles associated game object, as well as storing the tiles
    -- associated sprite component for easy reference later
    local function on_new_cell(args)
        local pos_x = (args.x - 1) * 32 + self.map_simple_pos.x
        local pos_y = (args.y - 1) * 32 + self.map_simple_pos.y

        if args.on_edge then
            args.cell.tile_id = tile_ids.WALL
        elseif (args.x == 4 and args.y == 4) or (args.x == 4 and args.y == 5) or (args.x == 5 and args.y == 4) or (args.x == 5 and args.y == 5) then
            args.cell.tile_id = tile_ids.YELLOW_WALL
        else
            args.cell.tile_id = tile_ids.FLOOR
        end

        args.cell.go = factory.create("map_simple#tile_factory", vmath.vector3(pos_x, pos_y, 0))

        args.cell.sprite_url = msg.url(nil, args.cell.go, "sprite")

    end

    -- Create new moku map, and pass the on_new_cell function
    self.map_simple = moku.new(8, 8, 32, 32, on_new_cell)

    -- Add the tile id table to the map, for easy and logical access
    self.map_simple.tile_ids = tile_ids

    -- Designate the WALL and YELLOW_WALL tile ids as autotiles.
    moku.set_autotile(self.map_simple, tile_ids.WALL, moku.at_algorithm.SIMPLE, true, true, false)
    moku.set_autotile(self.map_simple, tile_ids.YELLOW_WALL, moku.at_algorithm.SIMPLE, true, false, false)

    -- Since this is a custom map, we can not actually "auto"-tile, as
    -- moku has no way of knowing how we are doing things. In this case
    -- we can simply use a tiling matrix
    local tiling_matrix = moku.tiling_matrix_map(self.map_simple)

    -- Apply the values from the tiling matrix as needed
    for x, y, value in moku.iterate_map(self.map_simple) do
        msg.post(self.map_simple[x][y].sprite_url, "play_animation", {id = hash(tiling_matrix[x][y])})
    end
end

-- Gets the appropriate map, and cell at given world coords
function get_map_and_coords(self, mx, my)

    -- Get the camera position
    local cam_pos = go.get_position("camera_go")

    -- Calculate the relative world coords
    local wx = mx + cam_pos.x
    local wy = my + cam_pos.y

    -- Check if we are over a complex map cell
    local cx, cy = moku.pick_coords(self.map_complex, self.map_complex_pos.x, self.map_complex_pos.y, wx, wy)

    -- If yes return its coords, and tell user it was the complex map
    if cx and cy then
        return "complex", cx, cy
    else
        -- Otherwise check the simple map
        cx, cy = moku.pick_coords(self.map_simple, self.map_simple_pos.x, self.map_simple_pos.y, wx, wy)
        if cx and cy then
            return "simple", cx, cy
        else
            -- If neither return nil
            return nil
        end
    end
end

-- Sets a cells tile id
function set_cell_id(self, action_id, action)
    local map, cx, cy = get_map_and_coords(self, action.screen_x, action.screen_y)
    local tile_id
    if map == "complex" then
        if action_id == hash("left_click") then
            tile_id = self.map_complex.tile_ids.PLAINS
        elseif action_id == hash("ctrl") then
            tile_id = self.map_complex.tile_ids.OCEAN
        else
            tile_id = self.map_complex.tile_ids.PLATEAU
        end
        self.map_complex[cx][cy].tile_id = tile_id
        moku.autotile_surrounding(self.map_complex, cx, cy)
    elseif map == "simple" then
        if action_id == hash("left_click") then
            tile_id = self.map_simple.tile_ids.WALL
        elseif action_id == hash("ctrl") then
            tile_id = self.map_simple.tile_ids.FLOOR
        else
            tile_id = self.map_simple.tile_ids.YELLOW_WALL
        end
        self.map_simple[cx][cy].tile_id = tile_id
        -- Since custom maps cant use true autotiling we use the tiling matrix workaround
        local surrounding_matrix = moku.tiling_matrix_surrounding(self.map_simple, cx, cy)
        for _x, _y, value in moku.iterate_surrounding(self.map_simple, cx, cy ) do
            msg.post(self.map_simple[_x][_y].sprite_url, "play_animation", {id = hash(surrounding_matrix[_x][_y])})
        end
    end
end
