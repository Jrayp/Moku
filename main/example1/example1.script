local moku = require "moku/moku"

--o  Forward Declarations  o--

local manipulate_4bit
local pick_cell
local setup_4bit
local setup_8bit

--o====================o
--o  Script functions
--o====================o

function init(self)

    msg.post("@render:", "clear_color", { color = vmath.vector4(.25, .25, .25, 0) } )

    setup_4bit(self)
    setup_8bit(self)

    msg.post("camera_go#camera", "acquire_camera_focus")
    msg.post(".", "acquire_input_focus")

end

function on_input(self, action_id, action)
    if action_id == hash("left_click") then

        local bits, tx, ty = pick_cell(self, action.screen_x, action.screen_y)

        if bits == 8 then
            self.map_8bit[tx][ty] = self.map_8bit.tile_types.PLAINS
            moku.autotile_surrounding(self.map_8bit, tx, ty)
        elseif bits == 4 then
            manipulate_4bit(self, tx, ty, self.map_4bit.tile_types.WALL)
        end

    elseif action_id == hash("ctrl") then

        local bits, tx, ty = pick_cell(self, action.screen_x, action.screen_y)

        if bits == 8 then
            self.map_8bit[tx][ty] = self.map_8bit.tile_types.OCEAN
            moku.autotile_surrounding(self.map_8bit, tx, ty)
        elseif bits == 4 then
            manipulate_4bit(self, tx, ty, self.map_4bit.tile_types.FLOOR)
        end

    elseif action_id == hash("shift") then

        local bits, tx, ty = pick_cell(self, action.screen_x, action.screen_y)

        if bits == 8 then
            self.map_8bit[tx][ty] = self.map_8bit.tile_types.PLATEAU
            moku.autotile_surrounding(self.map_8bit, tx, ty)
        elseif bits == 4 then
            manipulate_4bit(self, tx, ty, self.map_4bit.tile_types.YELLOW_WALL)
        end

    elseif action_id == hash("right") then

        local cam_pos = go.get_position("camera_go#camera")

        if cam_pos.x < 150 then
            cam_pos.x = cam_pos.x + 4
            go.set_position(cam_pos, "camera_go#camera")
        end

    elseif action_id == hash("left") then

        local cam_pos = go.get_position("camera_go#camera")

        if cam_pos.x > - 150 then
            cam_pos.x = cam_pos.x - 4
            go.set_position(cam_pos, "camera_go#camera")
        end

    elseif action_id == hash("up") then

        local cam_pos = go.get_position("camera_go#camera")

        if cam_pos.y < 80 then
            cam_pos.y = cam_pos.y + 4
            go.set_position(cam_pos, "camera_go#camera")
        end

    elseif action_id == hash("down") then

        local cam_pos = go.get_position("camera_go#camera")

        if cam_pos.y > - 80 then
            cam_pos.y = cam_pos.y - 4
            go.set_position(cam_pos, "camera_go#camera")
        end

    end
end

--o===================o
--o  Local functions
--o===================o

-- Setup the simple and easy 8bit tilemap
function setup_8bit(self, tile_types_8bit, tile_types_4bit)

    local tile_types = {
        -- Autotiles
        PLAINS = 1,
        PLATEAU = 49,
        -- Normal Tiles
        OCEAN = 97
    }

    self.map_8bit = moku.new_from_tilemap("map_8bit#example1_tm", 32, 32, tile_types)
    self.map_8bit_pos = go.get_position("map_8bit")

    moku.set_autotile(self.map_8bit, tile_types.PLAINS, moku.bits.EIGHT, true, true, true, {tile_types.PLATEAU})
    moku.set_autotile(self.map_8bit, tile_types.PLATEAU, moku.bits.EIGHT, true, true, true)

    moku.autotile_map(self.map_8bit)

end

-- Setup the horrible mess 4bit custom map.
-- Setting up a custom map is obviously going to be more work,
-- but this probably isn't the cleanest way to handle it.
-- Just a quick demonstration.
function setup_4bit(self)

    local tile_types = {
        --Autotiles
        WALL = 1,
        YELLOW_WALL = 17,
        --Normal Tiles
        FLOOR = 33
    }

    self.map_4bit_pos = go.get_position("map_4bit")
    self.tiles = {}

    local function fill_fn(args)
        if self.tiles[args.x] == nil then
            self.tiles[args.x] = {}
        end

        local pos_x = (args.x - 1) * 32 + self.map_4bit_pos.x
        local pos_y = (args.y - 1) * 32 + self.map_4bit_pos.y

        self.tiles[args.x][args.y] = factory.create("map_4bit#tile_factory", vmath.vector3(pos_x, pos_y, 0))

        if args.on_border then
            return tile_types.WALL
        elseif (args.x == 4 and args.y == 4)
            or (args.x == 4 and args.y == 5)
            or (args.x == 5 and args.y == 4)
            or (args.x == 5 and args.y == 5) then
                return tile_types.YELLOW_WALL
            else
                return tile_types.FLOOR
            end
        end

        self.map_4bit = moku.new(8, 8, 32, 32, fill_fn)

        self.map_4bit.tile_types = tile_types

        moku.set_autotile(self.map_4bit, tile_types.WALL, moku.bits.FOUR, true, true, false)
        moku.set_autotile(self.map_4bit, tile_types.YELLOW_WALL, moku.bits.FOUR, true, false, false)

        local tiling_matrix = moku.tiling_matrix_map(self.map_4bit)

        for x, y, value in moku.iterate_map(self.map_4bit) do
            local sprite_url = msg.url(nil, self.tiles[x][y], "sprite")
            msg.post(sprite_url, "play_animation", {id = hash(tiling_matrix[x][y])})
        end

    end

    function manipulate_4bit(self, x, y, tile_type)

        self.map_4bit[x][y] = tile_type

        local surrounding_matrix = moku.tiling_matrix_surrounding(self.map_4bit, x, y)

        for _x, _y, value in moku.iterate_surrounding(self.map_4bit, x, y ) do
            local sprite_url = msg.url(nil, self.tiles[_x][_y], "sprite")
            msg.post(sprite_url, "play_animation", {id = hash(surrounding_matrix[_x][_y])})
        end

    end

    function pick_cell(self, mx, my)

        local cam_pos = go.get_position("camera_go")
        local wx = mx + cam_pos.x
        local wy = my + cam_pos.y

        local tx, ty = moku.pick_cell(self.map_8bit, self.map_8bit_pos.x, self.map_8bit_pos.y, wx, wy)

        if tx and ty then
            return 8, tx, ty
        else
            tx, ty = moku.pick_cell(self.map_4bit, self.map_4bit_pos.x, self.map_4bit_pos.y, wx, wy)
            if tx and ty then
                return 4, tx, ty
            else
                return 0, 0, 0
            end
        end

    end
